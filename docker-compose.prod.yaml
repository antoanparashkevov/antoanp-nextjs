services:
  # Front-end service (starts after the app-backend)
  app-frontend:
    build:
      context: ./frontend  # Build from the "frontend" directory
      dockerfile: Dockerfile
    image: nextjs-antoanp-prod-img
    container_name: nextjs-antoanp-prod-container
    restart: unless-stopped
    volumes:
      - /app/node_modules  # Persistent volume for dependencies
      - /app/.next  # Persistent volume for Next.js build output
    ports:
      - "3001:3001"
    networks:
      - host-prod-network

# Back-end service (starts first)
  app-backend:
    build:
      context: ./backend  # Build from the "backend" directory
      dockerfile: Dockerfile
      args:
        user: "current-user"  # Enclose in quotes if a literal string
        uid: 1000
    image: php-fpm-antoanp-prod-img
    container_name: php-fpm-antoanp-prod-container
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/backend/healthcheck.sh"]
      interval: 5s  # Check every 5 seconds
      timeout: 3s   # Fail if response takes longer than 3 seconds
      retries: 3    # Retry 3 times before marking unhealthy
    working_dir: /var/www/backend
    volumes:
      - ./backend:/var/www/backend  # Mount backend directory
    networks:
      - host-prod-network

  db:
    image: mysql:8.0
    container_name: db-antoanp-prod-container
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}  # Ensure DB_DATABASE is defined correctly
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}  # Ensure DB_PASSWORD is defined correctly
      MYSQL_PASSWORD: ${DB_PASSWORD}  # Ensure DB_PASSWORD is defined correctly
      MYSQL_USER: ${DB_USERNAME}  # Ensure DB_USERNAME is defined correctly
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker-compose/prod/mysql:/docker-entrypoint-initdb.d
    networks:
      - host-prod-network

networks:
  host-prod-network:
    external: true

services:
  # Front-end service (starts after the app-backend)
  app-frontend:
    build:
      context: ./frontend  # Build from the "frontend" directory
      dockerfile: Dockerfile
    image: nextjs-antoanp-prod-img
    container_name: nextjs-antoanp-prod-container
    restart: unless-stopped
    volumes:
      - /app/node_modules  # Persistent volume for dependencies
      - /app/.next  # Persistent volume for Next.js build output
    ports:
      - "3000:3000"
    depends_on: # Ensure the app-backend service starts after the app-frontend service
      - app-backend
      - db
      - nginx
    networks:
      - prod_network

# Back-end service (starts first)
  app-backend:
    build:
      context: ./backend  # Build from the "backend" directory
      dockerfile: Dockerfile
      args:
        user: "current-user"  # Enclose in quotes if a literal string
        uid: 1000
    image: php-fpm-antoanp-prod-img
    container_name: php-fpm-antoanp-prod-container
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/backend/healthcheck.sh"]
      interval: 5s  # Check every 5 seconds
      timeout: 3s   # Fail if response takes longer than 3 seconds
      retries: 3    # Retry 3 times before marking unhealthy
    working_dir: /var/www/backend
    volumes:
      - ./backend:/var/www/backend  # Mount backend directory
    networks:
      - prod_network

  db:
    image: mysql:8.0
    container_name: db-antoanp-prod-container
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}  # Ensure DB_DATABASE is defined correctly
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}  # Ensure DB_PASSWORD is defined correctly
      MYSQL_PASSWORD: ${DB_PASSWORD}  # Ensure DB_PASSWORD is defined correctly
      MYSQL_USER: ${DB_USERNAME}  # Ensure DB_USERNAME is defined correctly
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker-compose/prod/mysql:/docker-entrypoint-initdb.d
    networks:
      - prod_network

  nginx:
    image: nginx:alpine
    container_name: nginx-antoanp-prod-container
    restart: unless-stopped
    ports:
      - "443:443" #mapping port 443 to the container's port for HTTPS
      - "80:80"
    volumes:
     # - ./backend:/var/www/backend:cached  # Mount backend directory for serving
      - ./frontend:/var/www/frontend:cached # Mount backend directory for serving  
      - ./docker-compose/prod/nginx:/etc/nginx/conf.d/:ro
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf:/etc/nginx/ssl:ro #mounting the letsencrypt certificates to the nginx container
    networks:
      - prod_network

  certbot:
    image: certbot/certbot:latest
    container_name: certbot-antoanp-container
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw # rw stands for read and write. Certbot will write its files into ./certbot/www and nginx will serve them on port 80 to every user asking for
      - ./certbot/conf/:/etc/letsencrypt:rw # Certbot will create the certificates in the /etc/letsencrypt. We will use volumes to share the files between nginx and certbot


networks:
  prod_network:
    driver: bridge
